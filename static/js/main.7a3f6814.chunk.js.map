{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":";kOAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE5B,OACC,sBAAKC,UAAU,sDAAf,cACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,kBACrB,gCACC,6BAAKF,IACL,4BAAIC,WCaOK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKIC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,qBAAKT,UAAU,MAAf,SACC,uBACAA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCEI,EARA,SAACC,GACf,OACC,sBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UAA1C,cACEH,EAAMI,aCkBKC,E,kDApBd,WAAYL,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACZC,UAAU,GAHO,E,qDAOnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKV,MAAMI,a,GAhBQQ,aCqDbC,G,wDA3Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACZhB,OAAQ,GACR0B,YAAa,IAJD,E,qDAQd,WAAqB,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAErB,OAAQiC,S,oBAOxC,WACC,MAAgCb,KAAKJ,MAA7BhB,EAAR,EAAQA,OAAQ0B,EAAhB,EAAgBA,YAEVQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACrC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAKrD,OAAQrC,EAAOuC,OAGb,sBAAK3C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAce,KAAKI,iBAF/B,IAGC,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUxB,OAAQkC,WAPtB,gD,GA7BeZ,cCCHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.7a3f6814.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\t//const { name, email, id } = props; destructured once and then again with this replacing the props line above\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> {/*TACHYON LIBRARY USED FOR STYLING */}\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}test?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {  \r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/> \r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => { //Automatically every component in React has a property 'Children' This has CardList as it wraps it in App.js\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', height: '1000px'}}> {/* {} is a Javascript expression, another {} as its returning an object, where you can use css styles but in camelCase */}\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) { //Error boundary which the user will see, good for production error catching\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n//STATE different to props, props is the properties, input like robots, STATE is how a child talks to a neighbour in the 1 way data flow tree structure, e.g. search box has to communicate with the cardlist and vice versa\r\n//STATE is object which describes your application, e.g. the robot and whatever is input in the searchbox, state is able to change.\r\n// Parent feeds STATE into Child component, as soon as child component receives STATE, its a property, which it can't change.\r\n\r\nclass App extends Component { //App or the Parent owns STATE so it can change it\r\n\tconstructor() {\r\n\t\tsuper() //calls constructor of Component\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() { //component function so no arrow notation, lifecycle methods / hooks which occur in order, such as constructor() and render() and more\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users') //fetch makes a http request\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users => this.setState({ robots: users}));\r\n\t}\r\n\r\n\tonSearchChange = (event) => { //Random function name, arrow function for any function/method which doesnt come from REACT such as constructor(), redner() to avoid an error with state. As 'this' refers to the searchbox input right now instead of this App state robots, fixed with arrow notation\r\n\t\tthis.setState({ searchfield: event.target.value }) // set State so the searchfield is always getting updated and not empty string\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\t//const filteredRobots = this.state.robots.filter(robot =>{\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\t//if (robots.length === 0) { //!robots.length could work too as it evaluates to true\r\n\t\t//\treturn <h1>Loading...</h1>\r\n\t\t//} else { if else statement can be changed to ternary \r\n\t\treturn !robots.length ? //!robots.length could work too as it evaluates to true\r\n\t\t\t<h1>Loading...</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/> {/* searchChange is a prop which calls the onSearch function, passed into SearchBox component*/}\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// const App = () => {\r\n// \treturn (\r\n// \t\t<div className='tc'>\r\n// \t\t\t<h1>RoboFriends</h1>\r\n// \t\t\t<SearchBox />\r\n// \t\t\t<CardList robots={robots}/>\r\n// \t\t</div>\r\n// \t);\r\n// } \r\n\r\n// <CardList robots={robots}/> accessed from the STATE now","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}